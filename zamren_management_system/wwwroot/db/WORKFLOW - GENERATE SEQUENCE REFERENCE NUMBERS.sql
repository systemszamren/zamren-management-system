-- =============================================================
-- Author:		JOSHUA D KOSAMU
-- Create date: 11/06/2024
-- Language: 	MYSQL
-- Description:	WORKFLOW - GENERATE SEQUENCE REFERENCE NUMBERS 
-- ==============================================================
    
-- ===========NOTES=================
-- 1. This script is used to generate sequence reference numbers for a given module code.
-- 2. The reference number is generated by concatenating the module code, the current date sequence and the current sequence number.
-- 3. The sequence number is generated by incrementing the current sequence number by 1.
-- 4. The sequence number is reset to 1 if the current date sequence is different from the current sequence number, i.e. the sequence number is reset daily.
-- 5. The sequence number is stored in the wkf_sequence table.
-- 6. The module code must be a valid module code from the sec_modules table.
-- 7. The default_id is used to set the initial sequence number. It can be increased or decreased to suit the reference number length.
-- 8. The reference number is returned as an output parameter.
-- 9. Example usage: call generate_reference_number ('WKF', @ref ); SELECT @ref;
-- 10. Example output for a workflow task: WKF11624100000001
-- =================================

-- USE demo_database;

DROP PROCEDURE IF EXISTS generate_reference_number;

DELIMITER //

CREATE PROCEDURE generate_reference_number(
    IN i_module_code VARCHAR(10),
    OUT o_ref_no VARCHAR(50)
)
    proc_label:
BEGIN

    DECLARE module_code VARCHAR(10);
    DECLARE today_sequence INT;
    DECLARE current_sequence INT;
    DECLARE new_id INT;
    DECLARE default_id INT DEFAULT 99999999; -- reduce or increase the default_id to suit your reference number length

    -- CHECK IF moduleCode PROVIDED IS OF A VALID MODULE CODE
    IF NOT EXISTS(SELECT Id FROM sec_module WHERE Code = i_module_code)
    THEN
SELECT 0 INTO o_ref_no;
SELECT o_ref_no;
LEAVE proc_label;
END IF;

SELECT Code INTO module_code FROM sec_module WHERE Code = i_module_code;
SELECT CONCAT(DAY(CURDATE()), MONTH(CURDATE()), SUBSTR(YEAR(CURDATE()), 3, 2)) INTO today_sequence;

-- CHECK IF moduleCode SEQUENCE IS AVAILABLE IN wkf_sequence
IF NOT EXISTS(SELECT * FROM wkf_sequence WHERE ModuleCode = i_module_code)
    THEN
        INSERT INTO wkf_sequence (Id, Sequence, ModuleCode)
        VALUES (default_id, today_sequence, i_module_code);
        -- ERROR HANDLING
ELSE
SELECT Sequence INTO current_sequence FROM wkf_sequence WHERE ModuleCode = i_module_code;
IF (current_sequence != today_sequence)
        THEN
UPDATE wkf_sequence
SET Sequence = today_sequence, Id = default_id WHERE ModuleCode = i_module_code;
-- ERROR HANDLING
END IF;
END IF;

UPDATE wkf_sequence SET Id = LAST_INSERT_ID(Id + 1) WHERE ModuleCode = i_module_code;

SELECT Id INTO new_id FROM wkf_sequence WHERE ModuleCode = i_module_code;

SELECT CONCAT(module_code, today_sequence, new_id) INTO o_ref_no;
SELECT o_ref_no;

END //

DELIMITER ;

-- call the procedure like this
call generate_reference_number ('WKF', @ref);
SELECT @ref;
-- e.g. WKF11624100000001